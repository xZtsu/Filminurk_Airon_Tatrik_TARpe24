﻿using Filminurk.Core.Dto;
using Filminurk.Core.ServiceInterface;
using Filminurk.Data;
using Filminurk.Models.Movies;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

<<<<<<< Updated upstream
namespace Filminurk.Controllers
{
    public class MoviesController : Controller
    {
        private readonly FilminurkTARpe24Context _context;
        private readonly IMovieServices _movieServices;
        public MoviesController
            (
                FilminurkTARpe24Context context,
                IMovieServices movieServices
            )
        {
            _context = context;
            _movieServices = movieServices;
        }
        public IActionResult Index()
        {
            var result = _context.Movies.Select(x => new MoviesIndexViewModel
            {
                ID = x.ID,
                Title = x.Title,
                FirstPublished = x.FirstPublished,
                CurrentRating = x.CurrentRating,
                CountryOfOrigin = x.CountryOfOrigin,
                MovieGenre = x.MovieGenre,
            });
            return View(result);
        }
        [HttpGet]
        public IActionResult Create()
        {
            MoviesCreateUpdateViewModel result = new();
            return View("CreateUpdate", result);
        }
        [HttpPost]
        public async Task<IActionResult>
    Create(MoviesCreateUpdateViewModel vm)
    {
    if (ModelState.IsValid)
    {
    var dto = new MoviesDTO()
    {
    ID = vm.ID,
    Title = vm.Title,
    Description = vm.Description,
    FirstPublished = vm.FirstPublished,
    Director = vm.Director,
    Actors = vm.Actors,
    CurrentRating = vm.CurrentRating,
    CountryOfOrigin = vm.CountryOfOrigin,
    MovieGenre = vm.MovieGenre,
    SubGenre = vm.SubGenre,
    EntryCreatedAt = vm.EntryCreatedAt,
    EntryModifiedAt = vm.EntryModifiedAt,
    };
    var result = await _movieServices.Create(dto);
    if (result == null)
    {
    return RedirectToAction(nameof(Index));
    }
    return RedirectToAction(nameof(Index));
    }
=======
@model Filminurk.Models.Movies.MoviesDeleteViewModel
>>>>>>> Stashed changes

    return NotFound();

<<<<<<< Updated upstream
    }
    [HttpGet]
    public async Task<IActionResult>
        Update(Guid id)
        {
        var movie = await _movieServices.DetailsAsync(id);

        if (movie == null)
        {
        return NotFound();
        }

        var vm = new MoviesCreateUpdateViewModel();
        vm.ID = movie.ID;
        vm.Title = movie.Title;
        vm.Description = movie.Description;
        vm.FirstPublished = movie.FirstPublished;
        vm.CurrentRating = movie.CurrentRating;
        vm.CountryOfOrigin = movie.CountryOfOrigin;
        vm.MovieGenre = movie.MovieGenre;
        vm.SubGenre = movie.SubGenre;
        vm.EntryCreatedAt = movie.EntryCreatedAt;
        vm.EntryModifiedAt = movie.EntryModifiedAt;
        vm.Director = movie.Director;
        vm.Actors = movie.Actors;

        return View("CreateUpdate",vm);
        }

        [HttpPost]
        public async Task<IActionResult>
            Update(MoviesCreateUpdateViewModel vm)
            {
            var dto = new MoviesDTO()
            {
            ID = vm.ID,
            Title = vm.Title,
            Description = vm.Description,
            FirstPublished = vm.FirstPublished,
            CurrentRating = vm.CurrentRating,
            CountryOfOrigin = vm.CountryOfOrigin,
            MovieGenre = vm.MovieGenre,
            SubGenre = vm.SubGenre,
            EntryCreatedAt = vm.EntryCreatedAt,
            EntryModifiedAt = vm.EntryModifiedAt,
            Director = vm.Director,
            Actors = vm.Actors,
            };
            var result = await _movieServices.Update(dto);

            if(result == null)
            {
            return NotFound();
            }
            return RedirectToAction(nameof(Index));
            }

            [HttpGet]
            public async Task<IActionResult>
                Delete(Guid id)
                {
                var movie = await _movieServices.DetailsAsync(id);
=======
<div>
    <h4>Film</h4>
    <hr />

    <dl class="row">
        <div class="form-group-row">
            <label asp-for="ID" class="col-sm-2 col-form-label" "></label>
            @Html.DisplayFor(model => model.ID)
        </div>
    </dl>

    <dl class="row">
        <div class="form-group-row">
            <label asp-for="Title" class="col-sm-2 col-form-label" "></label>
            @Html.DisplayFor(model => model.Title)
        </div>
    </dl>

    <dl class="row">
        <div class="form-group-row">
            <label asp-for="Description" class="col-sm-2 col-form-label" "></label>
            @Html.DisplayFor(model => model.Description)
        </div>
    </dl>

    <dl class="row">
        <div class="form-group-row">
            <label asp-for="FirstPublished" class="col-sm-2 col-form-label" "></label>
            @Html.DisplayFor(model => model.FirstPublished)
        </div>
    </dl>

    <dl class="row">
        <div class="form-group-row">
            <label asp-for="Director" class="col-sm-2 col-form-label" "></label>
            @Html.DisplayFor(model => model.Director)
        </div>
    </dl>

    <dl class="row">
        <div class="form-group-row">
            <label asp-for="CurrentRating" class="col-sm-2 col-form-label" "></label>
            @Html.DisplayFor(model => model.CurrentRating)
        </div>
    </dl>
>>>>>>> Stashed changes

                if (movie == null)
                {
                return NotFound();
                }
                var vm = new MoviesDeleteViewModel();
                vm.ID = movie.ID;
                vm.Title = movie.Title;
                vm.Description = movie.Description;
                vm.FirstPublished = movie.FirstPublished;
                vm.CurrentRating = movie.CurrentRating;
                vm.CountryOfOrigin = movie.CountryOfOrigin;
                vm.MovieGenre = movie.MovieGenre;
                vm.SubGenre = movie.SubGenre;
                vm.EntryCreatedAt = movie.EntryCreatedAt;
                vm.EntryModifiedAt = movie.EntryModifiedAt;
                vm.Director = movie.Director;
                vm.Actors = movie.Actors;

                return View(vm);

<<<<<<< Updated upstream
                }
                [HttpPost]
                public async Task<IActionResult>
                    DeleteConfirmation(Guid id)
                    {
                    var movie = await _movieServices.Delete(id);
                    if (movie == null)
                    {
                    return NotFound();
                    }
                    return RedirectToAction(nameof(Index));
                    }
                    }
                    }
=======
    <dl class="row">
        <div class="form-group-row">
            <label asp-for="BigBooms" class="col-sm-2 col-form-label" "></label>
            @Html.DisplayFor(model => model.BigBooms)
        </div>
    </dl>
    <hr />
    <form asp-action="DeleteConfirmation">
        <input type="hidden" asp-for="ID" />
        <input type="submit" value="Remove" class="btn btn-danger" />
        <a asp-action="Index" asp-controller="Movies" class="btn btn-success">Return to list</a>
    </form>
</div>
>>>>>>> Stashed changes
